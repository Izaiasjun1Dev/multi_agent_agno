#!/usr/bin/env python3
"""
Script para deletar todos os usu√°rios do AWS Cognito User Pool de forma recursiva.
Script to recursively delete all users from AWS Cognito User Pool.

Uso/Usage:
    python delete_all_users.py --user-pool-id <USER_POOL_ID> [--region <REGION>] [--dry-run]

Exemplo/Example:
    python delete_all_users.py --user-pool-id us-east-1_XXXXXXXXX --region us-east-1
    python delete_all_users.py --user-pool-id us-east-1_XXXXXXXXX --dry-run
"""

import argparse
import sys
import time
from typing import Any, Dict, List

import boto3
from botocore.exceptions import BotoCoreError, ClientError


class CognitoUserManager:
    """Gerenciador para opera√ß√µes de usu√°rios do Cognito"""

    def __init__(self, user_pool_id: str, region: str = "us-east-1"):
        """
        Inicializa o gerenciador do Cognito

        Args:
            user_pool_id: ID do User Pool do Cognito
            region: Regi√£o AWS (padr√£o: us-east-1)
        """
        self.user_pool_id = user_pool_id
        self.region = region

        try:
            self.cognito_client = boto3.client("cognito-idp", region_name=region)
            print(f"‚úÖ Conectado ao Cognito na regi√£o {region}")
        except Exception as e:
            print(f"‚ùå Erro ao conectar com o Cognito: {e}")
            sys.exit(1)

    def list_all_users(self) -> List[Dict[str, Any]]:
        """
        Lista todos os usu√°rios do User Pool

        Returns:
            Lista de usu√°rios
        """
        all_users = []
        pagination_token = None

        try:
            print("üìã Listando usu√°rios do User Pool...")

            while True:
                params = {
                    "UserPoolId": self.user_pool_id,
                    "Limit": 60,  # M√°ximo permitido pelo Cognito
                }

                if pagination_token:
                    params["PaginationToken"] = pagination_token

                response = self.cognito_client.list_users(**params)
                users = response.get("Users", [])
                all_users.extend(users)

                print(f"üìÑ Encontrados {len(users)} usu√°rios nesta p√°gina...")

                pagination_token = response.get("PaginationToken")
                if not pagination_token:
                    break

                # Pequena pausa para evitar rate limiting
                time.sleep(0.1)

            print(f"üìä Total de usu√°rios encontrados: {len(all_users)}")
            return all_users

        except ClientError as e:
            error_code = e.response.get("Error", {}).get("Code", "Unknown")
            error_message = e.response.get("Error", {}).get("Message", "Unknown error")
            print(f"‚ùå Erro do Cognito ({error_code}): {error_message}")
            return []
        except Exception as e:
            print(f"‚ùå Erro inesperado ao listar usu√°rios: {e}")
            return []

    def delete_user(self, username: str) -> bool:
        """
        Deleta um usu√°rio espec√≠fico

        Args:
            username: Nome do usu√°rio para deletar

        Returns:
            True se deletado com sucesso, False caso contr√°rio
        """
        try:
            self.cognito_client.admin_delete_user(
                UserPoolId=self.user_pool_id, Username=username
            )
            return True

        except ClientError as e:
            error_code = e.response.get("Error", {}).get("Code", "Unknown")
            error_message = e.response.get("Error", {}).get("Message", "Unknown error")
            print(
                f"‚ùå Erro ao deletar usu√°rio '{username}' ({error_code}): {error_message}"
            )
            return False
        except Exception as e:
            print(f"‚ùå Erro inesperado ao deletar usu√°rio '{username}': {e}")
            return False

    def delete_all_users(self, dry_run: bool = False) -> Dict[str, int]:
        """
        Deleta todos os usu√°rios do User Pool

        Args:
            dry_run: Se True, apenas simula a dele√ß√£o sem executar

        Returns:
            Dicion√°rio com estat√≠sticas da opera√ß√£o
        """
        users = self.list_all_users()

        if not users:
            print("‚ÑπÔ∏è  Nenhum usu√°rio encontrado para deletar.")
            return {"total": 0, "deleted": 0, "failed": 0}

        total_users = len(users)
        deleted_count = 0
        failed_count = 0

        print(
            f"\n{'üîç SIMULA√á√ÉO' if dry_run else 'üóëÔ∏è  DELE√á√ÉO'} - Processando {total_users} usu√°rios..."
        )
        print("=" * 60)

        for i, user in enumerate(users, 1):
            username = user.get("Username", "N/A")
            email = next(
                (
                    attr["Value"]
                    for attr in user.get("Attributes", [])
                    if attr["Name"] == "email"
                ),
                "N/A",
            )
            status = user.get("UserStatus", "N/A")

            print(f"[{i:3d}/{total_users}] {username} ({email}) - Status: {status}")

            if dry_run:
                print(f"         üîç SIMULA√á√ÉO: Usu√°rio seria deletado")
                deleted_count += 1
            else:
                if self.delete_user(username):
                    print(f"         ‚úÖ Usu√°rio deletado com sucesso")
                    deleted_count += 1
                else:
                    print(f"         ‚ùå Falha ao deletar usu√°rio")
                    failed_count += 1

                # Pausa para evitar rate limiting
                time.sleep(0.2)

        print("\n" + "=" * 60)

        if dry_run:
            print(f"üîç SIMULA√á√ÉO CONCLU√çDA:")
            print(f"   üìä Total de usu√°rios: {total_users}")
            print(f"   üóëÔ∏è  Seriam deletados: {deleted_count}")
        else:
            print(f"üóëÔ∏è  DELE√á√ÉO CONCLU√çDA:")
            print(f"   üìä Total de usu√°rios: {total_users}")
            print(f"   ‚úÖ Deletados com sucesso: {deleted_count}")
            print(f"   ‚ùå Falhas: {failed_count}")

        return {"total": total_users, "deleted": deleted_count, "failed": failed_count}


def validate_user_pool_id(user_pool_id: str) -> bool:
    """
    Valida o formato do User Pool ID

    Args:
        user_pool_id: ID do User Pool para validar

    Returns:
        True se v√°lido, False caso contr√°rio
    """
    # Formato esperado: region_xxxxxxxxx (ex: us-east-1_XXXXXXXXX)
    import re

    pattern = r"^[a-z0-9-]+_[A-Za-z0-9]+$"
    return bool(re.match(pattern, user_pool_id))


def confirm_deletion(user_pool_id: str, dry_run: bool) -> bool:
    """
    Confirma a opera√ß√£o de dele√ß√£o com o usu√°rio

    Args:
        user_pool_id: ID do User Pool
        dry_run: Se √© uma simula√ß√£o

    Returns:
        True se confirmado, False caso contr√°rio
    """
    if dry_run:
        print(f"üîç MODO SIMULA√á√ÉO: Executando dry-run para User Pool: {user_pool_id}")
        return True

    print(
        f"‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° DELETAR TODOS os usu√°rios do User Pool: {user_pool_id}"
    )
    print("‚ö†Ô∏è  Esta a√ß√£o √© IRREVERS√çVEL!")
    print("\nTem certeza que deseja continuar? (Digite 'DELETAR' para confirmar)")

    confirmation = input("Confirma√ß√£o: ").strip()

    if confirmation == "DELETAR":
        print("‚úÖ Confirma√ß√£o recebida. Iniciando dele√ß√£o...")
        return True
    else:
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio.")
        return False


def main():
    """Fun√ß√£o principal do script"""
    parser = argparse.ArgumentParser(
        description="Deleta todos os usu√°rios de um User Pool do AWS Cognito",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemplos de uso:
  %(prog)s --user-pool-id us-east-1_XXXXXXXXX --region us-east-1
  %(prog)s --user-pool-id us-east-1_XXXXXXXXX --dry-run
  %(prog)s --user-pool-id us-east-1_XXXXXXXXX --region us-west-2

Nota: √â altamente recomendado executar com --dry-run primeiro para verificar
quais usu√°rios ser√£o deletados antes de executar a opera√ß√£o real.
        """,
    )

    parser.add_argument(
        "--user-pool-id",
        required=True,
        help="ID do User Pool do Cognito (ex: us-east-1_XXXXXXXXX)",
    )

    parser.add_argument(
        "--region", default="us-east-1", help="Regi√£o AWS (padr√£o: us-east-1)"
    )

    parser.add_argument(
        "--dry-run", action="store_true", help="Executa simula√ß√£o sem deletar usu√°rios"
    )

    parser.add_argument(
        "--force", action="store_true", help="Pula confirma√ß√£o (use com cuidado!)"
    )

    args = parser.parse_args()

    # Validar User Pool ID
    if not validate_user_pool_id(args.user_pool_id):
        print("‚ùå Formato inv√°lido do User Pool ID.")
        print("   Formato esperado: region_xxxxxxxxx (ex: us-east-1_XXXXXXXXX)")
        sys.exit(1)

    # Verificar credenciais AWS
    try:
        session = boto3.Session()
        credentials = session.get_credentials()
        if not credentials:
            print("‚ùå Credenciais AWS n√£o encontradas.")
            print("   Configure com: aws configure")
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erro ao verificar credenciais AWS: {e}")
        sys.exit(1)

    print("üöÄ AWS Cognito User Pool - Dele√ß√£o de Usu√°rios")
    print("=" * 50)
    print(f"üìç User Pool ID: {args.user_pool_id}")
    print(f"üåç Regi√£o: {args.region}")
    print(f"üîç Modo: {'Simula√ß√£o (Dry-run)' if args.dry_run else 'Dele√ß√£o Real'}")
    print("=" * 50)

    # Confirmar opera√ß√£o
    if not args.force:
        if not confirm_deletion(args.user_pool_id, args.dry_run):
            sys.exit(0)

    # Executar opera√ß√£o
    try:
        manager = CognitoUserManager(args.user_pool_id, args.region)
        result = manager.delete_all_users(dry_run=args.dry_run)

        # Status de sa√≠da baseado no resultado
        if result["failed"] > 0 and not args.dry_run:
            print(f"\n‚ö†Ô∏è  Processo conclu√≠do com {result['failed']} falhas.")
            sys.exit(1)
        else:
            print(f"\n‚úÖ Processo conclu√≠do com sucesso!")
            sys.exit(0)

    except KeyboardInterrupt:
        print("\n\n‚ùå Opera√ß√£o interrompida pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
